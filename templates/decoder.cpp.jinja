£ import 'templates/common.jinja' as common

£ macro bit_str(bit)
{{"%s" % bit.value}}
£- endmacro

£ macro pad_left_bit_pos(bit_pos)
{{"%2s" | format(bit_pos)}}
£- endmacro

£ macro encoding(enc)
// {{ enc.instruction.name }} [{{enc.instruction.fileName}}]
instructionClass = {{common.instruction_class(enc)}};
return true;
£- endmacro

bool aarch64_decode::decode_a64(uint32_t ir)
{
  £ for enc_set in sets
  if(
    £- for bit_range in enc_set.shared_bits_as_list_of_ranges()
      £- if loop.index0 != 0
   &&
      £- endif
      £ if bit_range.low == bit_range.high
 BITSEL(ir, {{bit_range.high}}) == {{bit_range.v}}
      £ else
 UNSIGNED_BITS(ir, {{bit_range.high}}, {{bit_range.low}}) == {{bit_range.v}}
      £ endif
    £ endfor
  ) {
  £ if not enc_set.is_singleton()
    £ for enc in enc_set.encodingsOrderedByIncreasingUnbound()
    £ set bound_bits = drop_unbound_from_pos_map(enc.getBitMany(enc_set.findUncommonlyBoundBits())).items()
    £ if list(bound_bits) != []
    if(
      £- for bit_pos, (_, bit_val) in bound_bits
      £- if loop.index0 != 0
     &&
      £- endif
 (((ir >> {{pad_left_bit_pos(bit_pos)}}) & 1) == {{bit_str(bit_val)}})
      £ endfor
    ) {
      {{ encoding(enc) | indent(6) }}
    }
    £ else
    {{ encoding(enc) | indent }}
    £ endif
    £ endfor
  £ else
    £ set enc = enc_set.encodings.pop()
    {{ encoding(enc) | indent }}
  £ endif
  }
  £ endfor
  return false;
}

£ for enc_set in sets
  £ for enc in enc_set.encodings
    £ for bs in enc.named_bit_sequences()
uint8_t aarch64_a64_{{enc.instruction.mnemonic|lower}}_{{enc.id}}::get_{{bs.name}}
{
      £ if bs.width == 1
  return BITSEL(ir, {{bs.high_bit}});
      £ else
  return UNSIGNED_BITS(ir, {{bs.high_bit}}, {{bs.low_bit}});
      £ endif
}
    £ endfor
  £ endfor
£ endfor
