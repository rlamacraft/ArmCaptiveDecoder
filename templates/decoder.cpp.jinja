£ import 'templates/common.jinja' as common

£ macro bit_str(bit)
{{"%s" % bit.value}}
£- endmacro

£ macro pad_left_bit_pos(bit_pos)
{{"%2s" | format(bit_pos)}}
£- endmacro

£ macro encoding(enc)
// {{ enc.instruction.name }} [{{enc.instruction.fileName}}]
£ set ic = common.instruction_class(enc)
opcode = {{ic}};
£ if ic in jumps.keys()
  £ if jumps[ic].is_predicated
is_predicated = (({{ic}}&)*this).decode_is_predicated();
  £ endif
end_of_block = true;
£ endif
return true;
£- endmacro

#include <aarch64-decode.h>
using namespace captive::arch::aarch64;
bool aarch64_decode::decode(uint32_t isa_mode, uint64_t insn_pc, const uint8_t *ptr)
{
  opcode = aarch64_unknown;
  pc = insn_pc;
  ir = *(const uint32_t *)ptr;
  end_of_block = false;
  is_predicated = false;
  bool result = false;
  switch ((aarch64_isa_modes)isa_mode)
  {
    case aarch64_a64:
      length = 4;
      result = decode_a64(ir);
      break;
  }
  if (opcode == aarch64_unknown)
  {
    end_of_block = true;
    result = true;
  }
  return result;
}

captive::arch::JumpInfo aarch64_decode::get_jump_info()
{
  JumpInfo info;
  info.type = captive::arch::JumpInfo::NONE;
  info.target = 0;
  switch (opcode)
  {
  £ for set in sets
    £ for enc in set.encodings
      £ set ic = common.instruction_class(enc)
      £ if ic in jumps.keys()
    case {{ic}}:
      £ set v = jumps[ic]
      £ if v["predicated"]
        info.type = captive::arch::JumpInfo::{{v["type"]}}_PREDICATED;
      £ else
        info.type = captive::arch::JumpInfo::{{v["type"]}};
      £ endif
      £ if v["target"]
        info.target = pc + (({{ic}} *)this)->imms64;
      £ endif
      break;
      £ endif
    £ endfor
  £ endfor
    default:
      break;
  }
  return info;
}

inline bool aarch64_decode::decode_a64(uint32_t ir)
{
  £ for enc_set in sets
  if(
    £- for bit_range in enc_set.shared_bits_as_list_of_ranges()
      £- if loop.index0 != 0
   &&
      £- endif
      £ if bit_range.low == bit_range.high
 BITSEL(ir, {{bit_range.high}}) == {{bit_range.v}}
      £ else
 UNSIGNED_BITS(ir, {{bit_range.high}}, {{bit_range.low}}) == {{bit_range.v}}
      £ endif
    £ endfor
  ) {
  £ if not enc_set.is_singleton()
    £ for enc in enc_set.encodingsOrderedByIncreasingUnbound()
    £ set bound_bits = drop_unbound_from_pos_map(enc.getBitMany(enc_set.findUncommonlyBoundBits())).items()
    £ if list(bound_bits) != []
    if(
      £- for bit_pos, (_, bit_val) in bound_bits
      £- if loop.index0 != 0
     &&
      £- endif
 (((ir >> {{pad_left_bit_pos(bit_pos)}}) & 1) == {{bit_str(bit_val)}})
      £ endfor
    ) {
      {{ encoding(enc) | indent(6) }}
    }
    £ else
    {{ encoding(enc) | indent }}
    £ endif
    £ endfor
  £ else
    £ set enc = enc_set.encodings.pop()
    {{ encoding(enc) | indent }}
  £ endif
  }
  £ endfor
  return false;
}

£ for enc_set in sets
  £ for enc in enc_set.encodings
    £ for bs in enc.named_bit_sequences()
uint8_t aarch64_a64_{{enc.instruction.mnemonic|lower}}_{{enc.id}}::get_{{bs.name}}
{
      £ if bs.width == 1
  return BITSEL(ir, {{bs.high_bit}});
      £ else
  return UNSIGNED_BITS(ir, {{bs.high_bit}}, {{bs.low_bit}});
      £ endif
}
    £ endfor
  £ endfor
£ endfor
